from typing import overload, Union, Tuple
from decimal import Decimal


class fraction:
    def __init__(self, n: norm, d: norm=1) -> None: ...

    #types that can be cast to fraction
    norm = Union[int, float, object]

    numerator: int
    denominator: int

    def __str__(self) -> str: ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...
    def __abs__(self) -> int: ...
    def __bool__(self) -> bool: ...

    def __add__(self, other: norm) -> fraction: ...
    def __sub__(self, other: norm) -> fraction: ...
    def __mul__(self, other: norm) -> fraction: ...
    def __pow__(self, power: int) -> fraction: ...
    def __truediv__(self, other: norm) -> fraction: ...
    def __floordiv__(self, other: norm) -> int: ...
    def __mod__(self, other: norm) -> fraction: ...
    def __radd__(self, other: norm) -> fraction: ...
    def __rsub__(self, other: norm) -> fraction: ...
    def __rmul__(self, other: norm) -> fraction: ...
    def __rtruediv__(self, other: norm) -> fraction: ...
    def __rfloordiv__(self, other: norm) -> int: ...
    def __rmod__(self, other: norm) -> fraction: ...
    def __and__(self, other: fraction) -> fraction: ...
    @overload
    def __round__(self, n: None) -> int: ...
    @overload
    def __round__(self, n: int) -> float: ...

    def __pos__(self) -> fraction: ...
    def __neg__(self) -> fraction: ...
    def __invert__(self) -> fraction: ...

    def __eq__(self, other: norm) -> bool: ...
    def __ne__(self, other: norm) -> bool: ...
    def __lt__(self, other: norm) -> bool: ...
    def __le__(self, other: norm) -> bool: ...
    def __gt__(self, other: norm) -> bool: ...
    def __ge__(self, other: norm) -> bool: ...

    def get_continued_fraction(self) -> Tuple[int]: ...
    def get_decimal_value(self) -> Decimal: ...
    def is_int(self) -> bool: ...
    def does_terminate(self) -> bool: ...
    @staticmethod
    def estimate_fraction(num: float) -> fraction: ...
    @staticmethod
    def __get_prime_factors(num: int): Tuple[int]

class cfraction:
    def __init__(self, n: norm, d: norm=1) -> None: ...

    #types that can be cast to fraction
    norm = Union[int, float, object, fraction]

    numerator: complex
    denominator: int
    @property
    def real(self) -> fraction: return ...
    @property
    def imag(self) -> fraction: return ...

    def __str__(self) -> str: ...
    # def __abs__(self) -> int: ...
    def __bool__(self) -> bool: ...

    def __add__(self, other: norm) -> cfraction: ...
    def __sub__(self, other: norm) -> cfraction: ...
    def __mul__(self, other: norm) -> cfraction: ...
    def __pow__(self, power: int) -> cfraction: ...
    def __truediv__(self, other: norm) -> cfraction: ...
    def __radd__(self, other: norm) -> cfraction: ...
    def __rsub__(self, other: norm) -> cfraction: ...
    def __rmul__(self, other: norm) -> cfraction: ...
    def __rtruediv__(self, other: norm) -> cfraction: ...
    def __and__(self, other: fraction) -> cfraction: ...

    def __pos__(self) -> cfraction: ...
    def __neg__(self) -> cfraction: ...
    def __invert__(self) -> cfraction: ...

    def __eq__(self, other: norm) -> bool: ...
    def __ne__(self, other: norm) -> bool: ...

    # def conjugate(self) -> cfraction: ...
    def get_complex_value(self) -> Decimal: ...
    @staticmethod
    # def estimate_fraction(num: complex) -> fraction: ...

